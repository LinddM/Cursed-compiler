1,<if_stmt>,if
1,<open_parents>,(
1,<number>,4
1,<lessthan_op>,<
1,<eqmorethan_op>,<=
1,<number>,5
1,<close_parents>,)
1,<open_braces>,{
1,<eqmorethan_op>,<=
2,<print>,print
2,<open_parents>,(
2,<string_op>,"
2,<variable>,yes
2,<string_op>,"
2,<close_parents>,)
3,<close_braces>,}
4,<class>,class
4,<variable>,Foo
4,<open_braces>,{
5,<type>,int
5,<variable>,key
6,<close_braces>,}
8,<variable>,Foo
8,<variable>,a
9,<variable>,Foo
9,<variable>,b
11,<variable>,a
11,<asign_op>,=
11,<new>,new
11,<variable>,Foo
11,<open_parents>,(
11,<close_parents>,)
13,<variable>,b
13,<asign_op>,=
13,<variable>,a
15,<object>,a.key
15,<asign_op>,=
15,<number>,10
16,<print>,print
16,<open_parents>,(
16,<object>,b.key
16,<close_parents>,)
18,<variable>,a
18,<asign_op>,=
18,<new>,new
18,<variable>,Foo
18,<open_parents>,(
18,<close_parents>,)
19,<variable>,b
19,<asign_op>,=
19,<new>,new
19,<variable>,Foo
19,<open_parents>,(
19,<close_parents>,)
21,<if_stmt>,if
21,<open_parents>,(
21,<number>,4
21,<lessthan_op>,<
21,<eqmorethan_op>,<=
21,<number>,5
21,<close_parents>,)
21,<open_braces>,{
21,<eqmorethan_op>,<=
22,<print>,print
22,<open_parents>,(
22,<string_op>,"
22,<variable>,yes
22,<string_op>,"
22,<close_parents>,)
23,<close_braces>,}
25,<void>,void
25,<variable>,print_str
25,<open_parents>,(
25,<variable>,string
25,<variable>,value
25,<close_parents>,)
26,<void>,void
26,<variable>,print_int
26,<open_parents>,(
26,<type>,int
26,<variable>,value
26,<close_parents>,)
27,<void>,void
27,<variable>,print_bool
27,<open_parents>,(
27,<variable>,bool
27,<variable>,value
27,<close_parents>,)
29,<variable>,def
29,<type>,int
29,<variable>,main
29,<open_parents>,(
29,<close_parents>,)
29,<open_braces>,{
30,<variable>,print_str
30,<open_parents>,(
30,<string_op>,"
30,<variable>,Hello
30,<exclam>,!
30,<string_op>,"
30,<close_parents>,)
31,<variable>,print_int
31,<open_parents>,(
31,<number>,2
31,<arith_op>,+
31,<number>,3
31,<close_parents>,)
32,<variable>,print_bool
32,<open_parents>,(
32,<number>,5
32,<lessthan_op>,<
32,<number>,9
32,<close_parents>,)
33,<variable>,print_bool
33,<open_parents>,(
33,<number>,5
33,<lessthan_op>,<
33,<number>,2
33,<close_parents>,)
34,<return>,return
34,<number>,0
35,<close_braces>,}
37,<variable>,print_char
37,<open_parents>,(
37,<char_op>,'
37,<variable>,c
37,<char_op>,'
37,<close_parents>,)
38,<variable>,print_int
38,<open_parents>,(
38,<number>,2
38,<arith_op>,*
38,<number>,3
38,<close_parents>,)
39,<variable>,print_int
39,<open_parents>,(
39,<number>,3
39,<arith_op>,/
39,<number>,3
39,<close_parents>,)
41,<class>,class
41,<variable>,Example
41,<open_braces>,{
42,<void>,void
42,<variable>,main
42,<open_parents>,(
42,<close_parents>,)
42,<open_braces>,{
43,<type>,int
43,<variable>,x
43,<type>,int
43,<variable>,y
44,<variable>,x
44,<asign_op>,=
44,<variable>,read
44,<open_parents>,(
44,<close_parents>,)
45,<variable>,y
45,<asign_op>,=
45,<variable>,read
45,<open_parents>,(
45,<close_parents>,)
46,<print>,print
46,<open_parents>,(
46,<variable>,gcd
46,<open_parents>,(
46,<variable>,x
46,<comma_sep>,,
46,<variable>,y
46,<close_parents>,)
46,<close_parents>,)
47,<close_braces>,}
48,<type>,int
48,<variable>,gcd
48,<open_parents>,(
48,<type>,int
48,<variable>,a
48,<comma_sep>,,
48,<type>,int
48,<variable>,b
48,<close_parents>,)
48,<open_braces>,{
49,<if_stmt>,if
49,<open_parents>,(
49,<variable>,b
49,<asign_op>,=
49,<eq_op>,==
49,<eq_op>,==
49,<number>,0
49,<close_parents>,)
50,<return>,return
50,<variable>,a
51,<else_stmt>,else
52,<return>,return
52,<variable>,gcd
52,<open_parents>,(
52,<variable>,b
52,<comma_sep>,,
52,<variable>,a
52,<arith_op>,%
52,<variable>,b
52,<close_parents>,)
53,<close_braces>,}
54,<close_braces>,}
56,<class>,class
56,<variable>,ListNode
56,<open_braces>,{
57,<type>,int
57,<variable>,data
58,<variable>,ListNode
58,<variable>,next
59,<void>,void
59,<variable>,setData
59,<open_parents>,(
59,<type>,int
59,<variable>,x
59,<close_parents>,)
59,<open_braces>,{
60,<variable>,data
60,<asign_op>,=
60,<variable>,x
61,<close_braces>,}
62,<close_braces>,}
63,<class>,class
63,error,_estoEsError
63,<open_braces>,{
64,<type>,int
64,<variable>,data
64,<asign_op>,=
64,<number>,0
65,<type>,int
65,error,45varError
66,<type>,int
66,<variable>,myVar
66,<asign_op>,=
66,error,87.e
67,<type>,float
67,<variable>,no_error
68,<type>,float
68,error,err^or
69,<close_braces>,}
70,<class>,class
70,<variable>,List
70,<open_braces>,{
71,<variable>,ListNode
71,<variable>,head
72,<void>,void
72,<variable>,show
72,<open_parents>,(
72,<variable>,ListNode
72,<variable>,list
72,<close_parents>,)
72,<open_braces>,{
73,<variable>,ListNode
73,<variable>,cursor
74,<type>,int
74,<variable>,count
75,<variable>,count
75,<asign_op>,=
75,<number>,0
76,<variable>,cursor
76,<asign_op>,=
76,<variable>,list
77,<while_stmt>,while
77,<open_parents>,(
77,<variable>,cursor
77,<exclam>,!
77,<eq_op>,!=
77,<eq_op>,!=
77,<null>,null
77,<close_parents>,)
77,<open_braces>,{
78,<variable>,count
78,<asign_op>,=
78,<variable>,count
78,<arith_op>,+
78,<number>,1
79,<print>,print
79,<open_parents>,(
79,<variable>,count
79,<comma_sep>,,
79,<object>,cursor.data
79,<close_parents>,)
80,<variable>,cursor
80,<asign_op>,=
80,<object>,cursor.next
81,<close_braces>,}
82,<close_braces>,}
83,<void>,void
83,<variable>,main
83,<open_parents>,(
83,<close_parents>,)
83,<open_braces>,{
84,<variable>,ListNode
84,<variable>,second
85,<variable>,ListNode
85,<variable>,third
86,<variable>,head
86,<asign_op>,=
86,<new>,new
86,<variable>,ListNode
86,<open_parents>,(
86,<close_parents>,)
87,<object>,head.setData
87,<open_parents>,(
87,<number>,4
87,<close_parents>,)
88,<print>,print
88,<open_parents>,(
88,<object>,head.data
88,<close_parents>,)
89,<variable>,second
89,<asign_op>,=
89,<new>,new
89,<variable>,ListNode
89,<open_parents>,(
89,<close_parents>,)
90,<object>,second.setData
90,<open_parents>,(
90,<number>,5
90,<close_parents>,)
91,<print>,print
91,<open_parents>,(
91,<object>,second.data
91,<close_parents>,)
92,<variable>,third
92,<asign_op>,=
92,<new>,new
92,<variable>,ListNode
92,<open_parents>,(
92,<close_parents>,)
93,<object>,third.setData
93,<open_parents>,(
93,<number>,11
93,<close_parents>,)
94,<print>,print
94,<open_parents>,(
94,<object>,third.data
94,<close_parents>,)
95,<object>,head.next
95,<asign_op>,=
95,<variable>,second
96,<object>,second.next
96,<asign_op>,=
96,<variable>,third
97,<object>,third.next
97,<asign_op>,=
97,<null>,null
98,<variable>,show
98,<open_parents>,(
98,<variable>,head
98,<close_parents>,)
99,<close_braces>,}
100,<close_braces>,}
