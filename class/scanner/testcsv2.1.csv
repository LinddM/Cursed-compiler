1,<if_stmt>,if
1,<open_parents>,(
1,error,4
1,error,<
1,<asign_op>,=
1,error,5
1,<close_parents>,)
1,<open_braces>,{
2,<print>,print
2,<open_parents>,(
2,error,"
2,<variable>,yes
2,error,"
2,<close_parents>,)
3,<close_braces>,}
5,<class>,class
5,<variable>,Foo
5,<open_braces>,{
6,<type>,int
6,<variable>,key
7,<close_braces>,}
9,<variable>,Foo
9,<variable>,a
10,<variable>,Foo
10,<variable>,b
12,<variable>,a
12,<asign_op>,=
12,<new>,new
12,<variable>,Foo
12,<open_parents>,(
12,<close_parents>,)
14,<variable>,b
14,<asign_op>,=
14,<variable>,a
16,error,a.key
16,<asign_op>,=
16,error,10
17,<print>,print
17,<open_parents>,(
17,error,b.key
17,<close_parents>,)
19,<variable>,a
19,<asign_op>,=
19,<new>,new
19,<variable>,Foo
19,<open_parents>,(
19,<close_parents>,)
20,<variable>,b
20,<asign_op>,=
20,<new>,new
20,<variable>,Foo
20,<open_parents>,(
20,<close_parents>,)
22,<void>,void
22,<variable>,print_str
22,<open_parents>,(
22,<variable>,string
22,<variable>,value
22,<close_parents>,)
23,<void>,void
23,<variable>,print_int
23,<open_parents>,(
23,<type>,int
23,<variable>,value
23,<close_parents>,)
24,<void>,void
24,<variable>,print_bool
24,<open_parents>,(
24,<variable>,bool
24,<variable>,value
24,<close_parents>,)
26,<variable>,def
26,<type>,int
26,<variable>,main
26,<open_parents>,(
26,<close_parents>,)
26,<open_braces>,{
27,<variable>,print_str
27,<open_parents>,(
27,error,"
27,<variable>,Hello
27,error,!
27,error,"
27,<close_parents>,)
28,<variable>,print_int
28,<open_parents>,(
28,error,2
28,<arith_op>,+
28,error,3
28,<close_parents>,)
29,<variable>,print_bool
29,<open_parents>,(
29,error,5
29,error,<
29,error,9
29,<close_parents>,)
30,<variable>,print_bool
30,<open_parents>,(
30,error,5
30,error,<
30,error,2
30,<close_parents>,)
31,<return>,return
31,error,0
32,<close_braces>,}
34,<variable>,print_char
34,<open_parents>,(
34,error,'
34,<variable>,c
34,error,'
34,<close_parents>,)
35,<variable>,print_int
35,<open_parents>,(
35,error,2
35,<arith_op>,*
35,error,3
35,<close_parents>,)
36,<variable>,print_int
36,<open_parents>,(
36,error,3
36,<arith_op>,/
36,error,3
36,<close_parents>,)
38,<class>,class
38,<variable>,Example
38,<open_braces>,{
39,<void>,void
39,<variable>,main
39,<open_parents>,(
39,<close_parents>,)
39,<open_braces>,{
40,<type>,int
40,<variable>,x
40,<type>,int
40,<variable>,y
41,<variable>,x
41,<asign_op>,=
41,<variable>,read
41,<open_parents>,(
41,<close_parents>,)
42,<variable>,y
42,<asign_op>,=
42,<variable>,read
42,<open_parents>,(
42,<close_parents>,)
43,<print>,print
43,<open_parents>,(
43,<variable>,gcd
43,<open_parents>,(
43,<variable>,x
43,error,,
43,<variable>,y
43,<close_parents>,)
43,<close_parents>,)
44,<close_braces>,}
45,<type>,int
45,<variable>,gcd
45,<open_parents>,(
45,<type>,int
45,<variable>,a
45,error,,
45,<type>,int
45,<variable>,b
45,<close_parents>,)
45,<open_braces>,{
46,<if_stmt>,if
46,<open_parents>,(
46,<variable>,b
46,<asign_op>,=
46,<asign_op>,=
46,error,0
46,<close_parents>,)
47,<return>,return
47,<variable>,a
48,<else_stmt>,else
49,<return>,return
49,<variable>,gcd
49,<open_parents>,(
49,<variable>,b
49,error,,
49,<variable>,a
49,<arith_op>,%
49,<variable>,b
49,<close_parents>,)
50,<close_braces>,}
51,<close_braces>,}
53,<class>,class
53,<variable>,ListNode
53,<open_braces>,{
54,<type>,int
54,<variable>,data
55,<variable>,ListNode
55,<variable>,next
56,<void>,void
56,<variable>,setData
56,<open_parents>,(
56,<type>,int
56,<variable>,x
56,<close_parents>,)
56,<open_braces>,{
57,<variable>,data
57,<asign_op>,=
57,<variable>,x
58,<close_braces>,}
59,<close_braces>,}
60,<class>,class
60,<variable>,List
60,<open_braces>,{
61,<variable>,ListNode
61,<variable>,head
62,<void>,void
62,<variable>,show
62,<open_parents>,(
62,<variable>,ListNode
62,<variable>,list
62,<close_parents>,)
62,<open_braces>,{
63,<variable>,ListNode
63,<variable>,cursor
64,<type>,int
64,<variable>,count
65,<variable>,count
65,<asign_op>,=
65,error,0
66,<variable>,cursor
66,<asign_op>,=
66,<variable>,list
67,<while_stmt>,while
67,<open_parents>,(
67,<variable>,cursor
67,error,!
67,<asign_op>,=
67,<null>,null
67,<close_parents>,)
67,<open_braces>,{
68,<variable>,count
68,<asign_op>,=
68,<variable>,count
68,<arith_op>,+
68,error,1
69,<print>,print
69,<open_parents>,(
69,<variable>,count
69,error,,
69,error,cursor.data
69,<close_parents>,)
70,<variable>,cursor
70,<asign_op>,=
70,error,cursor.next
71,<close_braces>,}
72,<close_braces>,}
73,<void>,void
73,<variable>,main
73,<open_parents>,(
73,<close_parents>,)
73,<open_braces>,{
74,<variable>,ListNode
74,<variable>,second
75,<variable>,ListNode
75,<variable>,third
76,<variable>,head
76,<asign_op>,=
76,<new>,new
76,<variable>,ListNode
76,<open_parents>,(
76,<close_parents>,)
77,error,head.setData
77,<open_parents>,(
77,error,4
77,<close_parents>,)
78,<print>,print
78,<open_parents>,(
78,error,head.data
78,<close_parents>,)
79,<variable>,second
79,<asign_op>,=
79,<new>,new
79,<variable>,ListNode
79,<open_parents>,(
79,<close_parents>,)
80,error,second.setData
80,<open_parents>,(
80,error,5
80,<close_parents>,)
81,<print>,print
81,<open_parents>,(
81,error,second.data
81,<close_parents>,)
82,<variable>,third
82,<asign_op>,=
82,<new>,new
82,<variable>,ListNode
82,<open_parents>,(
82,<close_parents>,)
83,error,third.setData
83,<open_parents>,(
83,error,11
83,<close_parents>,)
84,<print>,print
84,<open_parents>,(
84,error,third.data
84,<close_parents>,)
85,error,head.next
85,<asign_op>,=
85,<variable>,second
86,error,second.next
86,<asign_op>,=
86,<variable>,third
87,error,third.next
87,<asign_op>,=
87,<null>,null
88,<variable>,show
88,<open_parents>,(
88,<variable>,head
88,<close_parents>,)
89,<close_braces>,}
90,<close_braces>,}
91,<if_stmt>,if
91,<open_parents>,(
91,error,4
91,error,<
91,<asign_op>,=
91,error,5
91,<close_parents>,)
91,<open_braces>,{
92,<print>,print
92,<open_parents>,(
92,error,"
92,<variable>,yes
92,error,"
92,<close_parents>,)
93,<close_braces>,}
